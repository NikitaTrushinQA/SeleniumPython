                                                                             Что такое Page Object Model?
Page Object Model или кратко Page Object — это паттерн программирования, который очень популярен в автоматизации тестирования
и является одним из стандартов при автоматизации тестирования веб-продуктов. Это также один из удобных способов структурировать свой код таким образом,
чтобы его было удобно поддерживать, менять и работать с ним.

Основная идея состоит в том, что каждую страницу веб-приложения можно описать в виде объекта класса.
Способы взаимодействия пользователя со страницей можно описать с помощью методов класса. В идеале тест, который будет использовать Page Object,
должен описывать бизнес-логику тестового сценария и скрывать Selenium-методы взаимодействия с браузером и страницей.
При изменениях в верстке страницы не придется исправлять тесты, связанные с этой страницей. Вместо этого нужно будет поправить только класс, описывающий страницу.

То есть здесь применяются те же принципы, что и в разработке: мы хотим повысить читаемость кода и вынести в абстрактные методы все детали.
Тесты должны быть просто и понятно написаны, а повторяющиеся куски кода выделены в отдельные функции. В Page Object мы отделяем логику действий,
например, авторизовать пользователя, от конкретной реализации (найти поле почты, ввести туда данные, найти поле пароля, ввести туда данные, найти кнопку и т.д.).

                                                                                CI/CD

      Непрерывная интеграция(CI) — это методология разработки и набор практик, при которых в код вносятся небольшие изменения с частыми коммитами.
И поскольку большинство современных приложений разрабатываются с использованием различных платформ и инструментов,
то появляется необходимость в механизме интеграции и тестировании вносимых изменений.

С технической точки зрения, цель CI — обеспечить последовательный и автоматизированный способ сборки, упаковки и тестирования приложений. 
При налаженном процессе непрерывной интеграции разработчики с большей вероятностью будут делать частые коммиты, что, в свою очередь,
будет способствовать улучшению коммуникации и повышению качества программного обеспечения.

      Непрерывная поставка(CD) начинается там, где заканчивается непрерывная интеграция. Она автоматизирует развертывание приложений в различные окружения:
большинство разработчиков работают как с продакшн-окружением, так и со средами разработки и тестирования.

Инструменты CI/CD помогают настраивать специфические параметры окружения, которые конфигурируются при развертывании. 
А также CI/CD-автоматизация выполняет необходимые запросы к веб-серверам, базам данных и другим сервисам,
которые могут нуждаться в перезапуске или выполнении каких-то дополнительных действий при развертывании приложения.

Непрерывная интеграция и непрерывная поставка нуждаются в непрерывном тестировании, поскольку конечная цель — разработка качественных приложений.
Непрерывное тестирование часто реализуется в виде набора различных автоматизированных тестов (регрессионных, производительности и других),
которые выполняются в CI/CD-конвейере.
                                                                          Инкапсуляция (encapsulation)
Инкапсуляция (encapsulation) - это механизм, который объединяет данные и код, манипулирующий этими данными, а также защищает и то,
и другое от внешнего вмешательства или неправильного использования. 
Инкапсуляция нужна для того, что бы пользователь не мог использовать не предназначенный для него функционал

                                                                        Группировка тестов: setup 
setup — функция, которая выполнится перед запуском каждого теста из класса, обычно туда входит подготовка данных.
teardown — функция, которая выполняется ПОСЛЕ каждого теста из класса, обычно там происходит удаление тех данных, которые мы создали во время теста.
Чтобы функция запускалась автоматически перед каждым тест-кейсом, нужно пометить её как @pytest.fixture с параметрами scope="function",
что значит запускать на каждую функцию, и autouse=True,что значит запускать автоматически без явного вызова фикстуры.
