      							библиотеки
from selenium import webdriver
from selenium.webdriver.common.by import By
import time
import math
from selenium.webdriver.chrome.service import Service
import warnings                                                 #для скрытия предупреждения      пример:   warnings.filterwarnings("ignore", category=DeprecationWarning)

from selenium.webdriver.support.ui import Select                #                           

						  поиск плейхолдера
last_name = browser.find_element(By.XPATH, "//input[@placeholder = 'Input your last name']")
        last_name.send_keys('Vasilev')


                                                   Работа со списками
#http://suninjuly.github.io/selects1.html

from selenium import webdriver
from selenium.webdriver.common.by import By

browser = webdriver.Chrome()
browser.get(link)


browser.find_element(By.TAG_NAME, "select").click()
browser.find_element(By.CSS_SELECTOR, "option:nth-child(2)").click()   # или browser.find_element(By.CSS_SELECTOR, "[value='1']").click()

                                                    2  вариант

from selenium.webdriver.support.ui import Select
select = Select(browser.find_element(By.TAG_NAME, "select"))
select.select_by_value("1") # ищем элемент с текстом "Python"

#Можно использовать еще два метода: select.select_by_visible_text("text") и select.select_by_index(index).
#Первый способ ищет элемент по видимому тексту, например, select.select_by_visible_text("Python") найдёт "Python" для нашего примера.

#Второй способ ищет элемент по его индексу или порядковому номеру.
#Индексация начинается с нуля. Для того чтобы найти элемент с текстом "Python", нужно использовать select.select_by_index(1),
#так как опция с индексом 0 в данном примере имеет значение по умолчанию равное "--".

                                                Метод execute_script
from selenium import webdriver
browser = webdriver.Chrome()
browser.execute_script("alert('Robots at work');")
Обратите внимание, что исполняемый JavaScript нужно заключать в кавычки (двойные или одинарные).
Если внутри скрипта вам также понадобится использовать кавычки,
а для выделения скрипта вы уже используете двойные кавычки, то в скрипте следует поставить одинарные:

browser.execute_script("document.title='Script executing';")
Такой формат записи тоже будет работать:

browser.execute_script('document.title="Script executing";')
Можно с помощью этого метода выполнить сразу несколько инструкций, перечислив их через точку с запятой.
Изменим сначала заголовок страницы, а затем вызовем alert:

browser.execute_script("document.title='Script executing';alert('Robots at work');")

Чтобы кликнуть на перекрытую кнопку, нам нужно выполнить следующие команды в коде:

button = browser.find_element_by_tag_name("button")
browser.execute_script("return arguments[0].scrollIntoView(true);", button)
button.click()

                                                           Загрузка файлов
Если нам понадобится загрузить файл на веб-странице, мы можем использовать уже знакомый нам метод send_keys. 
Только теперь нам нужно в качестве аргумента передать путь к нужному файлу на диске вместо простого текста.

import os 
current_dir = os.path.abspath(os.path.dirname(__file__))    # получаем путь к директории текущего исполняемого файла 
file_path = os.path.join(current_dir, 'file.txt')           # добавляем к этому пути имя файла 
element.send_keys(file_path)
                                                          Alerts
переключиться на окно с alert, а затем принять его с помощью команды accept():
alert = browser.switch_to.alert
alert.accept()

Чтобы получить текст из alert, используйте свойство text объекта alert:
alert = browser.switch_to.alert
alert_text = alert.text

Другой вариант модального окна, который предлагает пользователю выбор согласиться с сообщением или отказаться от него, называется confirm.
Для переключения на окно confirm используется та же команда, что и в случае с alert:

confirm = browser.switch_to.alert
confirm.accept()

Для confirm-окон можно использовать следующий метод для отказа:

confirm.dismiss()
То же самое, что и при нажатии пользователем кнопки "Отмена". 

Третий вариант модального окна — prompt — имеет дополнительное поле для ввода текста. Чтобы ввести текст, используйте метод send_keys():

prompt = browser.switch_to.alert
prompt.send_keys("My answer")
prompt.accept()
                                                    Переход на новую вкладку браузера
При работе с веб-приложениями приходится переходить по ссылкам, которые открываются в новой вкладке браузера. WebDriver может работать только с одной вкладкой браузера. При открытии новой вкладки WebDriver продолжит работать со старой вкладкой. Для переключения на новую вкладку надо явно указать, на какую вкладку мы хотим перейти. Это делается с помощью команды switch_to.window:

browser.switch_to.window(window_name)
Чтобы узнать имя новой вкладки, нужно использовать метод window_handles, который возвращает массив имён всех вкладок. Зная, что в браузере теперь открыто две вкладки, выбираем вторую вкладку:

new_window = browser.window_handles[1]
Также мы можем запомнить имя текущей вкладки, чтобы иметь возможность потом к ней вернуться:

first_window = browser.window_handles[0]
После переключения на новую вкладку поиск и взаимодействие с элементами будут происходить уже на новой странице.
